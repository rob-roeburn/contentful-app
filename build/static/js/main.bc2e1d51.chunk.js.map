{"version":3,"sources":["components/ConfigScreen.tsx","components/EntryEditor.tsx","components/Page.tsx","components/Sidebar.tsx","components/Field.tsx","components/Dialog.tsx","index.tsx"],"names":["Config","props","onConfigure","a","sdk","app","getCurrentState","currentState","parameters","state","targetState","this","getParameters","setState","setReady","className","css","margin","Component","Entry","Page","Sidebar","Field","prop","Dialog","init","root","document","getElementById","location","locations","LOCATION_APP_CONFIG","component","LOCATION_ENTRY_FIELD","LOCATION_ENTRY_EDITOR","EntryEditor","LOCATION_DIALOG","LOCATION_ENTRY_SIDEBAR","LOCATION_PAGE","forEach","componentLocationSetting","is","render"],"mappings":"gTAeqBA,E,kDACnB,WAAYC,GAAqB,IAAD,8BAC9B,cAAMA,IAqBRC,YAtBgC,sBAsBlB,4BAAAC,EAAA,sEAOe,EAAKF,MAAMG,IAAIC,IAAIC,kBAPlC,cAONC,EAPM,yBASL,CAELC,WAAY,EAAKC,MAAMD,WAGvBE,YAAaH,IAdH,2CApBZ,EAAKE,MAAQ,CAAED,WAAY,IAK3BP,EAAMG,IAAIC,IAAIH,aAAY,kBAAM,EAAKA,iBAPP,E,uMAa6BS,KAAKV,MAAMG,IAAIC,IAAIO,gB,OAAxEJ,E,OAENG,KAAKE,SAASL,EAAa,CAAEA,cAAeG,KAAKF,OAAO,WAGtD,EAAKR,MAAMG,IAAIC,IAAIS,c,qIAuBrB,OACE,kBAAC,IAAD,CAAWC,UAAWC,YAAI,CAAEC,OAAQ,UAClC,kBAAC,IAAD,KACE,kBAAC,IAAD,mBACA,kBAAC,IAAD,wE,GA9C0BC,aCHrBC,EAJD,SAAClB,GACb,OAAO,kBAAC,IAAD,sCCGMmB,EAJF,SAACnB,GACZ,OAAO,kBAAC,IAAD,8BCGMoB,EAJC,SAACpB,GACf,OAAO,kBAAC,IAAD,iCCGMqB,EAJD,SAACC,GACb,OAAO,kBAAC,IAAD,qCCGMC,EAJA,SAACvB,GACd,OAAO,kBAAC,IAAD,gCCgBTwB,gBAAK,SAACrB,GACJ,IAAMsB,EAAOC,SAASC,eAAe,QAKH,CAChC,CACEC,SAAUC,YAAUC,oBACpBC,UAAW,kBAAC,EAAD,CAAQ5B,IAAMA,KAE3B,CACEyB,SAAUC,YAAUG,qBACpBD,UAAW,kBAAC,EAAD,CAAO5B,IAAMA,KAE1B,CACEyB,SAAUC,YAAUI,sBACpBF,UAAW,kBAACG,EAAD,CAAa/B,IAAMA,KAEhC,CACEyB,SAAUC,YAAUM,gBACpBJ,UAAW,kBAAC,EAAD,CAAQ5B,IAAMA,KAE3B,CACEyB,SAAUC,YAAUO,uBACpBL,UAAW,kBAAC,EAAD,CAAS5B,IAAMA,KAE5B,CACEyB,SAAUC,YAAUQ,cACpBN,UAAW,kBAAC,EAAD,CAAM5B,IAAMA,MASDmC,SAAQ,SAAAC,GAC5BpC,EAAIyB,SAASY,GAAGD,EAAyBX,WAC3Ca,iBAAOF,EAAyBR,UAAWN,W","file":"static/js/main.bc2e1d51.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AppExtensionSDK } from 'contentful-ui-extensions-sdk';\nimport { Heading, Form, Workbench, Paragraph } from '@contentful/forma-36-react-components';\nimport { css } from 'emotion';\n\nexport interface AppInstallationParameters {}\n\ninterface ConfigProps {\n  sdk: AppExtensionSDK;\n}\n\ninterface ConfigState {\n  parameters: AppInstallationParameters;\n}\n\nexport default class Config extends Component<ConfigProps, ConfigState> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = { parameters: {} };\n\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    props.sdk.app.onConfigure(() => this.onConfigure());\n  }\n\n  async componentDidMount() {\n    // Get current parameters of the app.\n    // If the app is not installed yet, `parameters` will be `null`.\n    const parameters: AppInstallationParameters | null = await this.props.sdk.app.getParameters();\n\n    this.setState(parameters ? { parameters } : this.state, () => {\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      this.props.sdk.app.setReady();\n    });\n  }\n\n  onConfigure = async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await this.props.sdk.app.getCurrentState();\n\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: this.state.parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState\n    };\n  };\n\n  render() {\n    return (\n      <Workbench className={css({ margin: '80px' })}>\n        <Form>\n          <Heading>App Config</Heading>\n          <Paragraph>Welcome to your contentful app. This is your config page.</Paragraph>\n        </Form>\n      </Workbench>\n    );\n  }\n}\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { EditorExtensionSDK } from 'contentful-ui-extensions-sdk';\n\ninterface EditorProps {\n  sdk: EditorExtensionSDK;\n}\n\nconst Entry = (props: EditorProps) => {\n  return <Paragraph>Hello Entry Editor Component</Paragraph>;\n};\n\nexport default Entry;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { PageExtensionSDK } from 'contentful-ui-extensions-sdk';\n\ninterface PageProps {\n  sdk: PageExtensionSDK;\n}\n\nconst Page = (props: PageProps) => {\n  return <Paragraph>Hello Page Component</Paragraph>;\n};\n\nexport default Page;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { SidebarExtensionSDK } from 'contentful-ui-extensions-sdk';\n\ninterface SidebarProps {\n  sdk: SidebarExtensionSDK;\n}\n\nconst Sidebar = (props: SidebarProps) => {\n  return <Paragraph>Hello Sidebar Component</Paragraph>;\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { FieldExtensionSDK } from 'contentful-ui-extensions-sdk';\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK;\n}\n\nconst Field = (prop: FieldProps) => {\n  return <Paragraph>Hello Entry Field Component</Paragraph>;\n};\n\nexport default Field;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { DialogExtensionSDK } from 'contentful-ui-extensions-sdk';\n\ninterface DialogProps {\n  sdk: DialogExtensionSDK;\n}\n\nconst Dialog = (props: DialogProps) => {\n  return <Paragraph>Hello Dialog Component</Paragraph>;\n};\n\nexport default Dialog;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  AppExtensionSDK,\n  FieldExtensionSDK,\n  SidebarExtensionSDK,\n  DialogExtensionSDK,\n  EditorExtensionSDK,\n  PageExtensionSDK,\n  BaseExtensionSDK,\n  init,\n  locations\n} from 'contentful-ui-extensions-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport './index.css';\n\nimport Config from './components/ConfigScreen';\nimport EntryEditor from './components/EntryEditor';\nimport Page from './components/Page';\nimport Sidebar from './components/Sidebar';\nimport Field from './components/Field';\nimport Dialog from './components/Dialog';\n\ninit((sdk: BaseExtensionSDK) => {\n  const root = document.getElementById('root');\n\n  // All possible locations for your app\n  // Feel free to remove unused locations\n  // Dont forget to delete the file too :)\n  const ComponentLocationSettings = [\n    {\n      location: locations.LOCATION_APP_CONFIG,\n      component: <Config sdk={(sdk as unknown) as AppExtensionSDK} />\n    },\n    {\n      location: locations.LOCATION_ENTRY_FIELD,\n      component: <Field sdk={(sdk as unknown) as FieldExtensionSDK} />\n    },\n    {\n      location: locations.LOCATION_ENTRY_EDITOR,\n      component: <EntryEditor sdk={(sdk as unknown) as EditorExtensionSDK} />\n    },\n    {\n      location: locations.LOCATION_DIALOG,\n      component: <Dialog sdk={(sdk as unknown) as DialogExtensionSDK} />\n    },\n    {\n      location: locations.LOCATION_ENTRY_SIDEBAR,\n      component: <Sidebar sdk={(sdk as unknown) as SidebarExtensionSDK} />\n    },\n    {\n      location: locations.LOCATION_PAGE,\n      component: <Page sdk={(sdk as unknown) as PageExtensionSDK} />\n    }\n  ];\n\n  // Select a component depending on a location in which the app is rendered.\n  //\n  // NB: Location \"app-config\" is auto-included in the list as most apps need it\n  // You can remove it (and on the app definition also) in case the app\n  // doesn't require it\n  ComponentLocationSettings.forEach(componentLocationSetting => {\n    if (sdk.location.is(componentLocationSetting.location)) {\n      render(componentLocationSetting.component, root);\n    }\n  });\n});\n"],"sourceRoot":""}